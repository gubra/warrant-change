/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.warrantchange.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.warrantchange.model.WarrantUserUniqueId;

import com.warrantchange.service.WarrantLocalService;
import com.warrantchange.service.WarrantService;
import com.warrantchange.service.WarrantUserUniqueIdLocalService;
import com.warrantchange.service.WarrantUserUniqueIdService;
import com.warrantchange.service.persistence.WarrantPersistence;
import com.warrantchange.service.persistence.WarrantUserUniqueIdPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the WarrantUserUniqueId local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.warrantchange.service.impl.WarrantUserUniqueIdLocalServiceImpl}.
 * </p>
 *
 * @author davidk
 * @see com.warrantchange.service.impl.WarrantUserUniqueIdLocalServiceImpl
 * @see com.warrantchange.service.WarrantUserUniqueIdLocalServiceUtil
 * @generated
 */
public abstract class WarrantUserUniqueIdLocalServiceBaseImpl
	implements WarrantUserUniqueIdLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.warrantchange.service.WarrantUserUniqueIdLocalServiceUtil} to access the WarrantUserUniqueId local service.
	 */

	/**
	 * Adds the WarrantUserUniqueId to the database. Also notifies the appropriate model listeners.
	 *
	 * @param warrantUserUniqueId the WarrantUserUniqueId
	 * @return the WarrantUserUniqueId that was added
	 * @throws SystemException if a system exception occurred
	 */
	public WarrantUserUniqueId addWarrantUserUniqueId(
		WarrantUserUniqueId warrantUserUniqueId) throws SystemException {
		warrantUserUniqueId.setNew(true);

		warrantUserUniqueId = warrantUserUniqueIdPersistence.update(warrantUserUniqueId,
				false);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(warrantUserUniqueId);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return warrantUserUniqueId;
	}

	/**
	 * Creates a new WarrantUserUniqueId with the primary key. Does not add the WarrantUserUniqueId to the database.
	 *
	 * @param id the primary key for the new WarrantUserUniqueId
	 * @return the new WarrantUserUniqueId
	 */
	public WarrantUserUniqueId createWarrantUserUniqueId(long id) {
		return warrantUserUniqueIdPersistence.create(id);
	}

	/**
	 * Deletes the WarrantUserUniqueId with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the WarrantUserUniqueId
	 * @throws PortalException if a WarrantUserUniqueId with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteWarrantUserUniqueId(long id)
		throws PortalException, SystemException {
		WarrantUserUniqueId warrantUserUniqueId = warrantUserUniqueIdPersistence.remove(id);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(warrantUserUniqueId);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Deletes the WarrantUserUniqueId from the database. Also notifies the appropriate model listeners.
	 *
	 * @param warrantUserUniqueId the WarrantUserUniqueId
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteWarrantUserUniqueId(
		WarrantUserUniqueId warrantUserUniqueId) throws SystemException {
		warrantUserUniqueIdPersistence.remove(warrantUserUniqueId);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(warrantUserUniqueId);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return warrantUserUniqueIdPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return warrantUserUniqueIdPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return warrantUserUniqueIdPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return warrantUserUniqueIdPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public WarrantUserUniqueId fetchWarrantUserUniqueId(long id)
		throws SystemException {
		return warrantUserUniqueIdPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the WarrantUserUniqueId with the primary key.
	 *
	 * @param id the primary key of the WarrantUserUniqueId
	 * @return the WarrantUserUniqueId
	 * @throws PortalException if a WarrantUserUniqueId with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public WarrantUserUniqueId getWarrantUserUniqueId(long id)
		throws PortalException, SystemException {
		return warrantUserUniqueIdPersistence.findByPrimaryKey(id);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return warrantUserUniqueIdPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the WarrantUserUniqueIds.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of WarrantUserUniqueIds
	 * @param end the upper bound of the range of WarrantUserUniqueIds (not inclusive)
	 * @return the range of WarrantUserUniqueIds
	 * @throws SystemException if a system exception occurred
	 */
	public List<WarrantUserUniqueId> getWarrantUserUniqueIds(int start, int end)
		throws SystemException {
		return warrantUserUniqueIdPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of WarrantUserUniqueIds.
	 *
	 * @return the number of WarrantUserUniqueIds
	 * @throws SystemException if a system exception occurred
	 */
	public int getWarrantUserUniqueIdsCount() throws SystemException {
		return warrantUserUniqueIdPersistence.countAll();
	}

	/**
	 * Updates the WarrantUserUniqueId in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param warrantUserUniqueId the WarrantUserUniqueId
	 * @return the WarrantUserUniqueId that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public WarrantUserUniqueId updateWarrantUserUniqueId(
		WarrantUserUniqueId warrantUserUniqueId) throws SystemException {
		return updateWarrantUserUniqueId(warrantUserUniqueId, true);
	}

	/**
	 * Updates the WarrantUserUniqueId in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param warrantUserUniqueId the WarrantUserUniqueId
	 * @param merge whether to merge the WarrantUserUniqueId with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the WarrantUserUniqueId that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public WarrantUserUniqueId updateWarrantUserUniqueId(
		WarrantUserUniqueId warrantUserUniqueId, boolean merge)
		throws SystemException {
		warrantUserUniqueId.setNew(false);

		warrantUserUniqueId = warrantUserUniqueIdPersistence.update(warrantUserUniqueId,
				merge);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(warrantUserUniqueId);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return warrantUserUniqueId;
	}

	/**
	 * Returns the Warrant local service.
	 *
	 * @return the Warrant local service
	 */
	public WarrantLocalService getWarrantLocalService() {
		return warrantLocalService;
	}

	/**
	 * Sets the Warrant local service.
	 *
	 * @param warrantLocalService the Warrant local service
	 */
	public void setWarrantLocalService(WarrantLocalService warrantLocalService) {
		this.warrantLocalService = warrantLocalService;
	}

	/**
	 * Returns the Warrant remote service.
	 *
	 * @return the Warrant remote service
	 */
	public WarrantService getWarrantService() {
		return warrantService;
	}

	/**
	 * Sets the Warrant remote service.
	 *
	 * @param warrantService the Warrant remote service
	 */
	public void setWarrantService(WarrantService warrantService) {
		this.warrantService = warrantService;
	}

	/**
	 * Returns the Warrant persistence.
	 *
	 * @return the Warrant persistence
	 */
	public WarrantPersistence getWarrantPersistence() {
		return warrantPersistence;
	}

	/**
	 * Sets the Warrant persistence.
	 *
	 * @param warrantPersistence the Warrant persistence
	 */
	public void setWarrantPersistence(WarrantPersistence warrantPersistence) {
		this.warrantPersistence = warrantPersistence;
	}

	/**
	 * Returns the WarrantUserUniqueId local service.
	 *
	 * @return the WarrantUserUniqueId local service
	 */
	public WarrantUserUniqueIdLocalService getWarrantUserUniqueIdLocalService() {
		return warrantUserUniqueIdLocalService;
	}

	/**
	 * Sets the WarrantUserUniqueId local service.
	 *
	 * @param warrantUserUniqueIdLocalService the WarrantUserUniqueId local service
	 */
	public void setWarrantUserUniqueIdLocalService(
		WarrantUserUniqueIdLocalService warrantUserUniqueIdLocalService) {
		this.warrantUserUniqueIdLocalService = warrantUserUniqueIdLocalService;
	}

	/**
	 * Returns the WarrantUserUniqueId remote service.
	 *
	 * @return the WarrantUserUniqueId remote service
	 */
	public WarrantUserUniqueIdService getWarrantUserUniqueIdService() {
		return warrantUserUniqueIdService;
	}

	/**
	 * Sets the WarrantUserUniqueId remote service.
	 *
	 * @param warrantUserUniqueIdService the WarrantUserUniqueId remote service
	 */
	public void setWarrantUserUniqueIdService(
		WarrantUserUniqueIdService warrantUserUniqueIdService) {
		this.warrantUserUniqueIdService = warrantUserUniqueIdService;
	}

	/**
	 * Returns the WarrantUserUniqueId persistence.
	 *
	 * @return the WarrantUserUniqueId persistence
	 */
	public WarrantUserUniqueIdPersistence getWarrantUserUniqueIdPersistence() {
		return warrantUserUniqueIdPersistence;
	}

	/**
	 * Sets the WarrantUserUniqueId persistence.
	 *
	 * @param warrantUserUniqueIdPersistence the WarrantUserUniqueId persistence
	 */
	public void setWarrantUserUniqueIdPersistence(
		WarrantUserUniqueIdPersistence warrantUserUniqueIdPersistence) {
		this.warrantUserUniqueIdPersistence = warrantUserUniqueIdPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("com.warrantchange.model.WarrantUserUniqueId",
			warrantUserUniqueIdLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.warrantchange.model.WarrantUserUniqueId");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	protected Class<?> getModelClass() {
		return WarrantUserUniqueId.class;
	}

	protected String getModelClassName() {
		return WarrantUserUniqueId.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = warrantUserUniqueIdPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = WarrantLocalService.class)
	protected WarrantLocalService warrantLocalService;
	@BeanReference(type = WarrantService.class)
	protected WarrantService warrantService;
	@BeanReference(type = WarrantPersistence.class)
	protected WarrantPersistence warrantPersistence;
	@BeanReference(type = WarrantUserUniqueIdLocalService.class)
	protected WarrantUserUniqueIdLocalService warrantUserUniqueIdLocalService;
	@BeanReference(type = WarrantUserUniqueIdService.class)
	protected WarrantUserUniqueIdService warrantUserUniqueIdService;
	@BeanReference(type = WarrantUserUniqueIdPersistence.class)
	protected WarrantUserUniqueIdPersistence warrantUserUniqueIdPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private static Log _log = LogFactoryUtil.getLog(WarrantUserUniqueIdLocalServiceBaseImpl.class);
	private String _beanIdentifier;
}